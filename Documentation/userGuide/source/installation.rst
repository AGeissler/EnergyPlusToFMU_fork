.. highlight:: rest

.. _installation:

Installation and configuration
==============================


Introduction
^^^^^^^^^^^^

This chapter describes how to install, configure and uninstall the EnergyPlusToFMU tools.


Software requirements
^^^^^^^^^^^^^^^^^^^^^

To export an EnergyPlus simulation as an FMU, EnergyPlusToFMU needs:

1. Python 2.6 or 2.7.

2. A C compiler and linker.

3. A C++ compiler and linker.

EnergyPlusToFMU has been tested on:

- Linux Ubuntu 12.04.

- Windows XP Professional.

- Mac OS X 10.5 and 10.6.


.. _installation directory:

Installation
^^^^^^^^^^^^

To install the EnergyPlusToFMU package:

1. Download the installation file from the :doc:`download` page. 

2. Unzip the installation file into any folder (hereafter referred to as the "installation directory").

Minimally, the installation directory should contain the following subdirectories:

- ``Scripts``

  - ``EnergyPlusToFMU``
    (Python scripts that create an FMU from an IDF file)

    - ``batch-dos``
      (batch files specific to Windows)

    - ``batch-linux``
      (shell scripts specific to Linux)

    - ``batch-macos``
      (shell scripts specific to Mac OS X)

- ``SourceCode``
  (C and C++ source code for creating an EnergyPlus FMU)

  - ``EnergyPlus``

  - ``Expat``

  - ``fmu-export-prep-src``

  - ``read-ep-file-src``

  - ``utility-src``


Configuration
^^^^^^^^^^^^^

EnergyPlusToFMU requires a C compiler and linker (in order to build the FMU), and a C++ compiler and linker (in order to build some supporting tools).

To run the compiler and linker, EnergyPlusToFMU uses the following batch files:

+----------------------+-------------------------------------------------------+
| Batch file           | Purpose                                               |
+======================+=======================================================+
| ``compile-c.bat``    | Compiles a C source code file into an object file.    |
+----------------------+-------------------------------------------------------+
| ``link-c-exe.bat``   | Links object files, generated by the C compiler,      |
|                      | into an executable (i.e., a stand-alone application). |
+----------------------+-------------------------------------------------------+
| ``link-c-lib.bat``   | Links object files, generated by the C compiler,      |
|                      | into a shared or dynamic link library.                |
+----------------------+-------------------------------------------------------+
| ``compile-cpp.bat``  | Compiles a C++ source code file into an object file.  |
+----------------------+-------------------------------------------------------+
| ``link-cpp-exe.bat`` | Links object files, generated by the C++ compiler,    |
|                      | into an executable (i.e. a stand-alone application).  |
+----------------------+-------------------------------------------------------+

The EnergyPlusToFMU installation includes default versions of these batch files.
However, the exact contents of these batch files depends on:

1. The operating system.

2. The compiler/linker environment (e.g., gcc or Microsoft Visual Studio).

3. The options desired (e.g., a 32-bit or 64-bit FMU).

Therefore configuring your installation may require modifying these files, according to your particular needs.

First, identify the appropriate subdirectory where these batch files reside.
As shown above, the `installation directory`_ contains a batch subdirectory for each of the supported platforms.

Note that Python detects your platform when it runs.
Therefore if you are using an emulator or virtual machine (for example, Cygwin under Windows, or a Windows virtual machine on a Mac), you should look in the subdirectory corresponding to the emulated operating system.

Each system-specific batch subdirectory includes sample batch files.
In addition to the default versions, some alternate versions may also be present.
The alternate versions can be identified in two ways:
(1) the file extension is "``.txt``", rather than "``.bat``";
and
(2) the file name identifies the associated options.
For example, a file ``compile-c-gcc-32bit.txt`` is one possible version of ``compile-c.bat``.
It is specific to the gcc compiler/linker environment, and it generates 32-bit object files even on a 64-bit machine.

Note that the default batch file is an exact copy of one of the supplied alternate versions.
For example, in the ``batch-dos`` subdirectory, the default batch file ``compile-c.bat`` is the same as ``compile-c-mvs10.txt`` (the version for Microsoft Visual Studio 10).
Therefore the installation has fewer unique batch files than it at first appears.


Checking compile-c.bat
^^^^^^^^^^^^^^^^^^^^^^

The included batch files cover some common cases.
With luck, you can simply run the EnergyPlusToFMU build process described in :doc:`build`, and everything will work as expected.

This section describes how to check the current version of batch file ``compile-c.bat``.
The following section describes how to check ``link-c-exe.bat``.
Once these batch files work, then it should not be difficult to make the other compiler and linker batch files work.

The check is to build one of the EnergyPlusToFMU supporting applications and to see whether it runs.
If successful, the application checks whether your compiler generates 32-bit or 64-bit executables.

To check the batch file, open a command window (e.g., a DOS prompt on Windows, a shell command prompt on Linux, or a Terminal window on MacOS).
The instructions that follow represent the command window like this:

.. code-block:: none

  # This is a comment.
  > (This is the command prompt, where you enter a command)
  (If shown, this is sample output in response to the command)

Note that your system may use a different symbol than "``>``" as the command prompt (for example, "``$``").
Furthermore, the prompt may include information such as the name of your system, or the name of the current subdirectory.

To begin, change to the appropriate batch file directory.
For example:

.. code-block:: none

  # Windows:
  > cd  epfmu_install_dir\Scripts\EnergyPlusToFMU\batch-dos

  # Linux:
  > cd  epfmu_install_dir/Scripts/EnergyPlusToFMU/batch-linux

Next, test the compiler batch file:

.. code-block:: none

  # Windows:
  > compile-c.bat  ..\..\..\SourceCode\utility-src\get-address-size.c

  # Linux, MacOS:
  #   Note the "./" before the name of the batch file.
  > ./compile-c.bat  ../../../SourceCode/utility-src/get-address-size.c

In response, the compiler should produce an object file called ``get-address-size.o``, in the current directory:

.. code-block:: none

  # Windows:
  > dir  *.o
  get-address-size.o

  # Linux, MacOS:
  > ls  *.o
  get-address-size.o

Unfortunately, the compiler batch file can fail.
Reasons for failure fall into a few broad categories:

- You do not have permission to run the batch file.
  When you try to run the batch file as shown above, watch for output like
  "Permission denied" from the operating system.
  See `Troubleshooting permissions`_ below.

- The source code file is not on the specified path.
  When you try to run the batch file as shown above, watch for output like
  "No such file or directory", along with the name of the source code file.
  Check the `installation directory`_ structure, as specified above.

- The commands in the batch file are wrong for your system.
  This will be the most common cause of problems.
  The subsections below give hints on providing an appropriate ``compile-c.bat``
  batch file.

- The compiler did not accept some statement in source code file ``get-address-size.c``.
  In this case, please contact the EnergyPlusToFMU team to report the problem.

Successfully compiling ``get-address-size.c`` does not completely test batch file ``compile-c.bat``.
The batch file must specify whether or not your compiler/linker environment provides a function called ``memmove()``.
The simple application being tested here does not use ``memmove()``, so this aspect of the compiler batch file is not checked.
See `Troubleshooting the memmove function`_ below.


Checking link-c-exe.bat
^^^^^^^^^^^^^^^^^^^^^^^

Once you have successfully compiled source code file ``get-address-size.c`` into an object file ``get-address-size.o``, the next step is to link the object file into a runnable program, or executable.

TODO: Fill in here.

TODO: Insert a troubleshooting section for missing libraries.  It's OK to say use an IDE to see what link options get passed.  That's not bad for compiler, either.


Modifying the batch files
^^^^^^^^^^^^^^^^^^^^^^^^^

This section gives hints on editing your batch files, in case the default versions do not work on your system, or in case you want to modify or replace the default versions (for example, to change the optimization level, or to use a different compiler/linker altogether).

Unfortunately, it is beyond the scope of this document to give full instructions on installing and using developer tools such as compilers and linkers.

The EnergyPlusToFMU tools only use the batch files named in the table above.
Thus, editing ``compile-c-gcc.txt`` will have no effect on how the FMU gets made.
Only ``compile-c.bat`` affects the EnergyPlusToFMU tools.

If a provided batch file does not work, it may simply be a matter of changing the directory path hard-coded in the batch file.
For example, the batch files for Microsoft Visual Studio list several known locations for finding the Visual Studio program files.
If your machine as Visual Studio installed in some other location (say, on the "``D:\``" drive rather than on "``C:\``"), then editing the batch file to point to the correct path may be all that is needed.

On most systems, the compiler also can act as the linker (or call the linker, filling in appropriate options).
Therefore once you have your system's compiler working, try listing the same tool in the linker batch files.


Finding a compiler/linker on Unix
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The following tips for finding the compiler/linker apply to Unix-like environments, including Linux and MacOS.

Unix-like environments often define ``cc`` as a link to the standard C compiler, and ``c++`` as a link to the standard C++ compiler.

If you have a standard compiler on your search path, the ``which`` command will locate it.
For example, entering the command:

.. code-block:: none

  > which gcc
  
will return the path to the ``gcc`` compiler, provided your system has it, and provided it is on the search path.
Here, ``>`` represents the command prompt.
If, on the other hand, you do not have gcc (or if you have it, but it is not on the search path), then ``which gcc`` will return nothing.

If you believe you have a certain compiler, but cannot find it on your search path, try the ``find`` command.
For example, to locate the ``icc`` compiler, try:

.. code-block:: none

  > find /usr/ -name icc
  > find /bin/ -name icc
  > find /opt/ -name icc
  > find / -name icc

The first three commands search specific directories that commonly contain developer tools.
The last command searches the entire directory tree (and may take quite a while).

The ``find`` command accepts wildcards
Put them in quote marks, in order to prevent the shell from operating on the wildcard.
For example:

.. code-block:: none

  > find /usr/ -name "*icc*"

searches the ``/usr/`` directory for any file whose name contains the string "icc".

Finally, the ``apropos`` command may help:

.. code-block:: none

  > apropos compiler

at the command prompt will search your help files for information pertinent to compilers.
Unfortunately, it may return many entries unrelated to compiling C and C++ source code.


Troubleshooting permissions
^^^^^^^^^^^^^^^^^^^^^^^^^^^

Permissions problems arise on Unix-like systems.
The batch files must have "execute" permission, meaning you are allowed to run the file as a set of commands.
To check the permissions:

.. code-block:: none

  # Linux, MacOS:
  > ls -lt  *.bat
  -rwxr--r--  ...  link-c-lib.bat
  -rwxr--r--  ...  link-c-exe.bat
  -rwxr--r--  ...  compile-c.bat
  -rwxr--r--  ...  link-cpp-exe.bat
  -rwxr--r--  ...  compile-cpp.bat

All five of the default batch files should have "``-rwx``" at the beginning of the permissions block (indicating you are allowed to read, write, and execute/run the file).
If not, then give the file execute permission:

.. code-block:: none

  # Linux, MacOS:
  > chmod  u=rwx,g=r,o=r  *.bat

and try running the compiler batch file again.


Troubleshooting the memmove function
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The batch file that runs the C compiler, ``compile-c.bat``, needs to indicate whether or not your C compiler/linker environment provides a non-standard function called ``memmove()``.

- While ``memmove()`` is non-standard in C, it is standard for C++.
  Therefore many C environments provide it as well.
  However, yours may not.

- If your C compiler/linker environment does provide ``memmove()``, then the batch
  file should pass the compiler the macro definition ``HAVE_MEMMOVE``.
  The included batch files show how to define a macro for various compilers.

- If, on the other hand, your C compiler/linker environment does not provide
  ``memmove()``, then do not define the macro in the compiler batch file.

- If you are not sure whether or not your system provides the function, simply watch
  for any errors while building your first FMU.
  If you fail to define ``HAVE_MEMMOVE`` when your system has it, the linker will
  complain about duplicate definitions of ``memmove()``.
  If, on the other hand, you define ``HAVE_MEMMOVE`` when your system does not have
  it, the linker will complain about not being able to find ``memmove()``.


Uninstallation
^^^^^^^^^^^^^^

To uninstall EnergyPlusToFMU, simply delete the `installation directory`_ where it was unzipped.
